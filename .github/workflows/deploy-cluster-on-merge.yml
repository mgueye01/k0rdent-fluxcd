name: Deploy Cluster on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy-cluster:
    # Only run when a PR with the cluster-request label is merged
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'cluster-request')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CLUSTER_REQUEST_PAT }}
          
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: '3.x'
          
      - name: Install gomplate
        run: |
          curl -o /usr/local/bin/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/v3.11.5/gomplate_linux-amd64
          chmod +x /usr/local/bin/gomplate
          
      - name: Initialize configuration
        run: task init
        
      - name: Fetch PR details
        id: pr_details
        run: |
          # Store PR number for later use
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          
          # Fetch PR details using GitHub CLI and save to file
          gh pr view ${{ github.event.pull_request.number }} --json body -q .body > pr_body.txt
          
          echo "PR body saved to pr_body.txt"
        env:
          GH_TOKEN: ${{ secrets.CLUSTER_REQUEST_PAT }}
          
      - name: Extract cluster information from PR
        id: extract_cluster_info
        run: |
          # Extract required parameters from PR body
          CLUSTER_NAME=$(grep -A 1 "**Cluster Name**:" pr_body.txt | tail -n 1 | tr -d ' ')
          MANAGEMENT_CLUSTER=$(grep -A 1 "**Management Cluster**:" pr_body.txt | tail -n 1 | tr -d ' ')
          
          # Validate required parameters
          if [ -z "$CLUSTER_NAME" ] || [ -z "$MANAGEMENT_CLUSTER" ]; then
            echo "Error: Missing required parameters in PR description"
            exit 1
          fi
          
          # Set outputs
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "MANAGEMENT_CLUSTER=$MANAGEMENT_CLUSTER" >> $GITHUB_ENV
          
          # Debug output
          echo "Deploying cluster:"
          echo "CLUSTER_NAME: $CLUSTER_NAME"
          echo "MANAGEMENT_CLUSTER: $MANAGEMENT_CLUSTER"
      
      - name: Verify cluster files
        run: |
          # Check that the cluster deployment files exist
          CLUSTER_DIR="management-clusters/${{ env.MANAGEMENT_CLUSTER }}/k0rdent/cluster-deployments/${{ env.CLUSTER_NAME }}"
          
          if [ ! -d "$CLUSTER_DIR" ]; then
            echo "Error: Cluster directory not found at $CLUSTER_DIR"
            exit 1
          fi
          
          if [ ! -f "$CLUSTER_DIR/cluster-deployment.yaml" ]; then
            echo "Error: cluster-deployment.yaml not found in $CLUSTER_DIR"
            exit 1
          fi
          
          if [ ! -f "$CLUSTER_DIR/kustomization.yaml" ]; then
            echo "Error: kustomization.yaml not found in $CLUSTER_DIR"
            exit 1
          fi
          
          echo "Cluster deployment files verified successfully"
      
      - name: Apply cluster deployment to FluxCD
        run: |
          echo "Applying cluster deployment for ${{ env.CLUSTER_NAME }} to the ${{ env.MANAGEMENT_CLUSTER }} management cluster"
          
          # Update the main kustomization.yaml if it's not already updated
          MAIN_KUSTOMIZATION="management-clusters/${{ env.MANAGEMENT_CLUSTER }}/k0rdent/cluster-deployments/kustomization.yaml"
          if ! grep -q "${{ env.CLUSTER_NAME }}" "$MAIN_KUSTOMIZATION"; then
            # Check if resources: [] is in the file and replace it
            if grep -q "resources: \[\]" "$MAIN_KUSTOMIZATION"; then
              sed -i "s|resources: \[\]|resources:\n- ${{ env.CLUSTER_NAME }}|g" "$MAIN_KUSTOMIZATION"
            else
              # Append to existing resources list
              sed -i "/resources:/a \ - ${{ env.CLUSTER_NAME }}" "$MAIN_KUSTOMIZATION"
            fi
            
            # Commit and push the changes
            git add "$MAIN_KUSTOMIZATION"
            git commit -m "Update kustomization.yaml to include ${{ env.CLUSTER_NAME }} cluster deployment"
            git push origin main
          fi
          
          # Add a comment to the PR
          gh pr comment ${{ env.PR_NUMBER }} --body "Cluster deployment for ${{ env.CLUSTER_NAME }} has been applied to the ${{ env.MANAGEMENT_CLUSTER }} management cluster via FluxCD."
        env:
          GH_TOKEN: ${{ secrets.CLUSTER_REQUEST_PAT }} 